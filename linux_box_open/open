#!/usr/bin/env perl

=head1
Run the open command remotely on your Mac, replacing paths as required

Written by Rick Tankard 4th Feb 2016. 
Version 1.0 I guess. 

The open command does as you would expect on the Mac. Now you can run the command on your Linux box and have the window open on your Mac. 

In your .bash_profile (or .bash_rc) you must set the following variables:

OPEN_MYMAC: the address of your local machine, (may require user name too, but at WEHI this is set the same)
OPEN_PATH_MAPS: tab delimited file with first column indicating the Linux box path and second the mac path. Final forward slash should be used consistently between the two columns. Lines starting with # or empty are ignored.

for example:
export OPEN_MYMAC=mac01
export OPEN_PATH_MAPS_FILE=~/.open_path_maps.txt

You may set public-private keys if you wish to avoid SSH prompts.


=cut

use 5.014;
use warnings;
use autodie;
use Env qw(OPEN_MYMAC OPEN_PATH_MAPS_FILE PWD);


if(!defined($OPEN_MYMAC)) {
    die "OPEN_MYMAC environment variable is not set.\n";
}
if(!defined($OPEN_PATH_MAPS_FILE)) {
    die "OPEN_PATH_MAPS_FILE environment variable is not set.\n";
}

my %local_to_remote;
open my $mapsf, '<', $OPEN_PATH_MAPS_FILE;
while(<$mapsf>) {
    chomp;
    next if /^#/;
    my @line = split "\t";
    next if (@line == 0);
    if(@line != 2) {
        die "On line $. of $OPEN_PATH_MAPS_FILE there is not exactly 2 items.\n";
    }
    $local_to_remote{$line[0]} = $line[1];
}
close $mapsf;


# parse command line

my $file_start = 0;
while($file_start < @ARGV && $ARGV[$file_start] =~ /^-/) {
    if($ARGV[$file_start] eq '-a' || $ARGV[$file_start] eq '-b') {
        # do not change -a or -b items
        $file_start++;
    }
    $file_start++;
}
if($file_start >= @ARGV) {
    die "Did not find files in open";
}

my $args_start = $file_start;
while($args_start < @ARGV && $ARGV[$args_start] ne '--args') {
    $args_start++;
}

my @pre = @ARGV[0..($file_start - 1)];
my @files = @ARGV[$file_start..($args_start - 1)];
my @args = @ARGV[$args_start..$#ARGV];

# Hacks to restore quotes if they were present, or even if they weren't
foreach my $pre (@pre) {
    unless($pre =~ /^-/) {
        $pre =~ s/(.*)/\"$1\"/;
    }
}
foreach my $arg (@args) {
    unless($arg =~ /^-/) {
        $arg =~ s/(.*)/\"$1\"/;
    }
}

# Change file paths
FILES: foreach my $file (@files) {
    if ($file !~ '^/') {
        # path is relative
        $file = "$PWD/$file";
    }
    foreach my $local (keys %local_to_remote) {
        if($file =~ s/^$local/$local_to_remote{$local}/) {
            next FILES;
        }
    }
    die "Could not find root path for $file\n";
};

my $open_command = "open " . join (" ", @pre, @files, @args);
say "Remote command: $open_command";
my @command = ('ssh', $OPEN_MYMAC, $open_command);
system(@command) == 0
        or die "system @command failed: $?";

